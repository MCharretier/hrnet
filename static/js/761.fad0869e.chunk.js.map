{"version":3,"file":"static/js/761.fad0869e.chunk.js","mappings":"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","sources":["webpack://hrnet/./src/components/Table/styles.module.css?67d9","components/Table/index.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"tableContainer\":\"styles_tableContainer__mp7Of\",\"tableLength\":\"styles_tableLength__PQseV\",\"tableFilter\":\"styles_tableFilter__wQIPp\",\"table\":\"styles_table__0CPbD\",\"tableInfo\":\"styles_tableInfo__ds9HG\",\"tablePagination\":\"styles_tablePagination__PJfJw\"};","import { useState, useMemo, useCallback } from 'react'\nimport {\n    createColumnHelper,\n    flexRender,\n    getCoreRowModel,\n    getFilteredRowModel,\n    getSortedRowModel,\n    getPaginationRowModel,\n    useReactTable\n} from '@tanstack/react-table'\nimport styles from './styles.module.css'\n\nconst initialPagination = {\n    pageIndex: 0,\n    pageSize: 10\n}\n\nfunction Table({ data }) {\n    const [globalFilter, setGlobalFilter] = useState('')\n    const [sorting, setSorting] = useState([])\n    const [pagination, setPagination] = useState(initialPagination)\n\n    const columnHelper = createColumnHelper()\n\n    const columns = useMemo(\n        () => [\n            columnHelper.accessor((row) => row.firstName, {\n                id: 'firstName',\n                cell: (info) => <i>{info.getValue()}</i>,\n                header: () => <span>First Name</span>\n            }),\n            columnHelper.accessor((row) => row.lastName, {\n                id: 'lastName',\n                cell: (info) => <i>{info.getValue()}</i>,\n                header: () => <span>Last Name</span>\n            }),\n            columnHelper.accessor((row) => row.startDate, {\n                id: 'startDate',\n                cell: (info) => <i>{info.getValue()}</i>,\n                header: () => <span>Start Date</span>\n            }),\n            columnHelper.accessor((row) => row.department, {\n                id: 'department',\n                cell: (info) => <i>{info.getValue()}</i>,\n                header: () => <span>Department</span>\n            }),\n            columnHelper.accessor((row) => row.dateOfBirth, {\n                id: 'dateOfBirth',\n                cell: (info) => <i>{info.getValue()}</i>,\n                header: () => <span>Date of Birth</span>\n            }),\n            columnHelper.accessor((row) => row.street, {\n                id: 'street',\n                cell: (info) => <i>{info.getValue()}</i>,\n                header: () => <span>Street</span>\n            }),\n            columnHelper.accessor((row) => row.city, {\n                id: 'city',\n                cell: (info) => <i>{info.getValue()}</i>,\n                header: () => <span>City</span>\n            }),\n            columnHelper.accessor((row) => row.state, {\n                id: 'state',\n                cell: (info) => <i>{info.getValue()}</i>,\n                header: () => <span>State</span>\n            }),\n            columnHelper.accessor((row) => row.zipCode, {\n                id: 'zipCode',\n                cell: (info) => <i>{info.getValue()}</i>,\n                header: () => <span>Zip Code</span>\n            })\n        ],\n        [columnHelper]\n    )\n\n    const table = useReactTable({\n        data,\n        columns,\n        rowCount: data.length,\n        state: {\n            globalFilter,\n            sorting,\n            pagination\n        },\n        getCoreRowModel: getCoreRowModel(),\n        getFilteredRowModel: getFilteredRowModel(),\n        getSortedRowModel: getSortedRowModel(),\n        getPaginationRowModel: getPaginationRowModel(),\n        onGlobalFilterChange: setGlobalFilter,\n        onSortingChange: setSorting,\n        onPaginationChange: setPagination\n    })\n\n    const handlePageSizeChange = useCallback(\n        (e) => {\n            table.setPageSize(Number(e.target.value))\n        },\n        [table]\n    )\n\n    const handleSearchChange = useCallback((e) => {\n        setGlobalFilter(String(e.target.value))\n    }, [])\n\n    return (\n        <div className={styles.tableContainer}>\n            <div className={styles.tableLength}>\n                <label>\n                    Show\n                    <select\n                        value={table.getState().pagination.pageSize}\n                        onChange={handlePageSizeChange}\n                    >\n                        {[10, 25, 50, 100].map((pageSize) => (\n                            <option key={pageSize} value={pageSize}>\n                                {pageSize}\n                            </option>\n                        ))}\n                    </select>\n                    entries\n                </label>\n            </div>\n            <div className={styles.tableFilter}>\n                <label>\n                    Search:\n                    <input\n                        type=\"search\"\n                        value={globalFilter ?? ''}\n                        onChange={handleSearchChange}\n                    />\n                </label>\n            </div>\n            <table className={styles.table}>\n                <thead>\n                    {table.getHeaderGroups().map((headerGroup) => (\n                        <tr key={headerGroup.id}>\n                            {headerGroup.headers.map((header) => (\n                                <th key={header.id} colSpan={header.colSpan}>\n                                    {header.isPlaceholder ? null : (\n                                        <div\n                                            className={\n                                                header.column.getCanSort()\n                                                    ? 'cursor-pointer select-none'\n                                                    : ''\n                                            }\n                                            onClick={header.column.getToggleSortingHandler()}\n                                            title={\n                                                // prettier-ignore\n                                                header.column.getCanSort() ? header.column.getNextSortingOrder() === 'asc' ? 'Sort ascending' : header.column.getNextSortingOrder() === 'desc' ? 'Sort descending' : 'Clear sort' : undefined\n                                            }\n                                        >\n                                            {flexRender(\n                                                header.column.columnDef.header,\n                                                header.getContext()\n                                            )}\n                                            {{\n                                                asc: ' 🔼',\n                                                desc: ' 🔽'\n                                            }[header.column.getIsSorted()] ??\n                                                null}\n                                        </div>\n                                    )}\n                                </th>\n                            ))}\n                        </tr>\n                    ))}\n                </thead>\n                <tbody>\n                    {table.getRowModel().rows.map((row) => (\n                        <tr key={row.id}>\n                            {row.getVisibleCells().map((cell) => (\n                                <td key={cell.id}>\n                                    {flexRender(\n                                        cell.column.columnDef.cell,\n                                        cell.getContext()\n                                    )}\n                                </td>\n                            ))}\n                        </tr>\n                    ))}\n                </tbody>\n                <tfoot>\n                    {table.getFooterGroups().map((footerGroup) => (\n                        <tr key={footerGroup.id}>\n                            {footerGroup.headers.map((header) => (\n                                <th key={header.id}>\n                                    {\n                                        // prettier-ignore\n                                        header.isPlaceholder ? null : flexRender(header.column.columnDef.footer, header.getContext())\n                                    }\n                                </th>\n                            ))}\n                        </tr>\n                    ))}\n                </tfoot>\n            </table>\n            <p className={styles.tableInfo}>\n                Showing{' '}\n                {table.getState().pagination.pageIndex *\n                    table.getState().pagination.pageSize +\n                    1}{' '}\n                to{' '}\n                {Math.min(\n                    (table.getState().pagination.pageIndex + 1) *\n                        table.getState().pagination.pageSize,\n                    data.length\n                )}{' '}\n                of {data.length} entries\n            </p>\n            <div className={styles.tablePagination}>\n                <button\n                    onClick={() => table.previousPage()}\n                    disabled={!table.getCanPreviousPage()}\n                >\n                    Previous\n                </button>\n                {Array.from({ length: table.getPageCount() }, (_, index) => (\n                    <button\n                        key={index}\n                        onClick={() => table.setPageIndex(index)}\n                        disabled={\n                            table.getState().pagination.pageIndex === index\n                        }\n                    >\n                        {index + 1}\n                    </button>\n                ))}\n                <button\n                    onClick={() => table.nextPage()}\n                    disabled={!table.getCanNextPage()}\n                >\n                    Next\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default Table\n"],"names":["initialPagination","pageIndex","pageSize","_ref","data","globalFilter","setGlobalFilter","useState","sorting","setSorting","pagination","setPagination","columnHelper","createColumnHelper","columns","useMemo","accessor","row","firstName","id","cell","info","_jsx","children","getValue","header","lastName","startDate","department","dateOfBirth","street","city","state","zipCode","table","useReactTable","rowCount","length","getCoreRowModel","getFilteredRowModel","getSortedRowModel","getPaginationRowModel","onGlobalFilterChange","onSortingChange","onPaginationChange","handlePageSizeChange","useCallback","e","setPageSize","Number","target","value","handleSearchChange","String","_jsxs","className","styles","getState","onChange","map","type","getHeaderGroups","headerGroup","headers","_asc$desc$header$colu","colSpan","isPlaceholder","column","getCanSort","onClick","getToggleSortingHandler","title","getNextSortingOrder","undefined","flexRender","columnDef","getContext","asc","desc","getIsSorted","getRowModel","rows","getVisibleCells","getFooterGroups","footerGroup","footer","Math","min","previousPage","disabled","getCanPreviousPage","Array","from","getPageCount","_","index","setPageIndex","nextPage","getCanNextPage"],"sourceRoot":""}